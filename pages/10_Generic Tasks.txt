# ==============================================================================
# WALKOUT MUSIC MANAGEMENT SYSTEM - STREAMLIT APP (Stats-like layout)
# ==============================================================================

# --- 0. Import Libraries ---
import streamlit as st
st.set_page_config(page_title="Walkout Music", layout="wide")  # first UI call

import pandas as pd
import numpy as np
from datetime import datetime
import html
import unicodedata
import re
import time

# --- Project Imports ---
from utils import get_gspread_client, connect_gsheet_tab, load_config_data
from auth import check_authentication, display_user_sidebar


# ==============================================================================
# CONSTANTS & CONFIG
# ==============================================================================
class Config:
    MAIN_SHEET_NAME = "UAEW_App"
    ATHLETES_TAB_NAME = "df"
    ATTENDANCE_TAB_NAME = "Attendance"

    FIXED_TASK = "Walkout Music"
    TASK_ALIASES = [r"\bwalkout\s*music\b", r"\bwalkout\b", r"\bmusic\b"]

    STATUS_PENDING = ""        # no request logged in current event
    STATUS_DONE = "Done"

    STATUS_COLOR_MAP = {
        STATUS_DONE: "#143d14",
        STATUS_PENDING: "#1e1e1e",
        "Issue": "#1e1e1e",
    }

    # Athletes columns (normalized)
    COL_ID = "id"
    COL_NAME = "name"
    COL_EVENT = "event"
    COL_ROLE = "role"
    COL_INACTIVE = "inactive"
    COL_IMAGE = "image"
    COL_MOBILE = "mobile"
    COL_FIGHT_NUMBER = "fight_number"
    COL_CORNER = "corner"
    COL_PASSPORT_IMAGE = "passport_image"

    DEFAULT_EVENT_PLACEHOLDER = "Z"

    # Attendance columns (exact in sheet)
    ATT_COL_ROWID = "#"
    ATT_COL_EVENT = "Event"
    ATT_COL_ATHLETE_ID = "Athlete ID"
    ATT_COL_NAME = "Name"
    ATT_COL_FIGHTER = "Fighter"
    ATT_COL_TASK = "Task"
    ATT_COL_STATUS = "Status"
    ATT_COL_USER = "User"
    ATT_COL_TIMESTAMP = "Timestamp"
    ATT_COL_TIMESTAMP_ALT = "TimeStamp"
    ATT_COL_NOTES = "Notes"


# ==============================================================================
# HELPERS
# ==============================================================================
_INVALID_STRS = {"", "none", "None", "null", "NULL", "nan", "NaN", "<NA>"}

def clean_and_normalize(text: str) -> str:
    if not isinstance(text, str):
        return ""
    text = text.strip().lower()
    text = unicodedata.normalize('NFKD', text)
    text = "".join([c for c in text if not unicodedata.combining(c)])
    return " ".join(text.split())

def parse_ts_series(raw: pd.Series) -> pd.Series:
    if raw is None or raw.empty:
        return pd.Series([], dtype='datetime64[ns]')
    tries = [
        pd.to_datetime(raw, format="%d/%m/%Y %H:%M:%S", errors="coerce"),
        pd.to_datetime(raw, format="%d/%m/%Y", errors="coerce"),
        pd.to_datetime(raw, format="%d-%m-%Y %H:%M:%S", errors="coerce"),
        pd.to_datetime(raw, format="%d-%m-%Y", errors="coerce"),
        pd.to_datetime(raw, errors="coerce"),
    ]
    ts_final = tries[0]
    for cand in tries[1:]:
        ts_final = ts_final.fillna(cand)
    return ts_final

def _clean_str_series(s: pd.Series) -> pd.Series:
    if s is None or s.empty:
        return pd.Series([], dtype=str)
    s = s.fillna("").astype(str).str.strip()
    return s.replace({k: "" for k in _INVALID_STRS})

def _fmt_date_from_text(s: str) -> str:
    if s is None:
        return "N/A"
    s = str(s).strip()
    if s in _INVALID_STRS:
        return "N/A"
    dt = pd.to_datetime(s, dayfirst=True, errors="coerce")
    return dt.strftime("%d/%m/%Y") if pd.notna(dt) else "N/A"

def make_task_mask(task_series: pd.Series, fixed_task: str, aliases: list[str] = None) -> pd.Series:
    t = task_series.fillna("").astype(str).str.lower()
    pats = [re.escape(fixed_task.lower())] + list(aliases or [])
    regex = "(" + "|".join(pats) + ")"
    return t.str.contains(regex, regex=True, na=False)

def join_links(*links: str) -> str:
    vals = [l.strip() for l in links if isinstance(l, str) and l.strip()]
    return "\n".join(vals)


# ==============================================================================
# DATA LOADING (cache)
# ==============================================================================
@st.cache_data(ttl=600)
def load_athletes() -> pd.DataFrame:
    try:
        gc = get_gspread_client()
        ws = connect_gsheet_tab(gc, Config.MAIN_SHEET_NAME, Config.ATHLETES_TAB_NAME)
        df = pd.DataFrame(ws.get_all_records())
        if df.empty:
            return pd.DataFrame()
        df.columns = [str(c).strip().lower().replace(" ", "_") for c in df.columns]

        if Config.COL_ROLE not in df.columns or Config.COL_INACTIVE not in df.columns:
            st.error("Columns 'ROLE'/'INACTIVE' not found.", icon="🚨")
            return pd.DataFrame()

        if df[Config.COL_INACTIVE].dtype == "object":
            df[Config.COL_INACTIVE] = df[Config.COL_INACTIVE].astype(str).str.upper().map(
                {"FALSE": False, "TRUE": True, "": True}
            ).fillna(True)
        elif pd.api.types.is_numeric_dtype(df[Config.COL_INACTIVE]):
            df[Config.COL_INACTIVE] = df[Config.COL_INACTIVE].map({0: False, 1: True}).fillna(True)

        df = df[(df[Config.COL_ROLE] == "1 - Fighter") & (df[Config.COL_INACTIVE] == False)].copy()

        df[Config.COL_EVENT] = df.get(Config.COL_EVENT, "").fillna(Config.DEFAULT_EVENT_PLACEHOLDER)
        for col in [Config.COL_IMAGE, Config.COL_MOBILE, Config.COL_FIGHT_NUMBER, Config.COL_CORNER, Config.COL_PASSPORT_IMAGE]:
            if col not in df.columns:
                df[col] = ""
            else:
                df[col] = df[col].fillna("")

        if Config.COL_NAME not in df.columns or Config.COL_ID not in df.columns:
            st.error("'name' or 'id' missing in athletes sheet.", icon="🚨")
            return pd.DataFrame()

        return df.sort_values(by=[Config.COL_EVENT, Config.COL_NAME]).reset_index(drop=True)
    except Exception as e:
        st.error(f"Error loading athletes: {e}", icon="🚨")
        return pd.DataFrame()


@st.cache_data(ttl=120)
def load_attendance() -> pd.DataFrame:
    try:
        gc = get_gspread_client()
        ws = connect_gsheet_tab(gc, Config.MAIN_SHEET_NAME, Config.ATTENDANCE_TAB_NAME)
        df_att = pd.DataFrame(ws.get_all_records())
        if df_att.empty:
            return pd.DataFrame(columns=[
                Config.ATT_COL_ROWID, Config.ATT_COL_EVENT, Config.ATT_COL_ATHLETE_ID,
                Config.ATT_COL_NAME, Config.ATT_COL_FIGHTER, Config.ATT_COL_TASK, Config.ATT_COL_STATUS,
                Config.ATT_COL_USER, Config.ATT_COL_TIMESTAMP, Config.ATT_COL_TIMESTAMP_ALT, Config.ATT_COL_NOTES
            ])
        for col in [
            Config.ATT_COL_ROWID, Config.ATT_COL_EVENT, Config.ATT_COL_ATHLETE_ID,
            Config.ATT_COL_NAME, Config.ATT_COL_FIGHTER, Config.ATT_COL_TASK, Config.ATT_COL_STATUS,
            Config.ATT_COL_USER, Config.ATT_COL_TIMESTAMP, Config.ATT_COL_TIMESTAMP_ALT, Config.ATT_COL_NOTES
        ]:
            if col not in df_att.columns:
                df_att[col] = pd.NA
        df_att[Config.ATT_COL_ATHLETE_ID] = df_att[Config.ATT_COL_ATHLETE_ID].astype(str)
        return df_att
    except Exception as e:
        st.error(f"Error loading attendance: {e}", icon="🚨")
        return pd.DataFrame()


@st.cache_data(ttl=120)
def preprocess_attendance(df_attendance: pd.DataFrame) -> pd.DataFrame:
    if df_attendance is None or df_attendance.empty:
        return pd.DataFrame()
    df = df_attendance.copy()
    df["fighter_norm"] = df.get(Config.ATT_COL_FIGHTER, "").astype(str).apply(clean_and_normalize)
    df["event_norm"]   = df.get(Config.ATT_COL_EVENT, "").astype(str).apply(clean_and_normalize)
    df["task_norm"]    = df.get(Config.ATT_COL_TASK, "").astype(str).str.strip().str.lower()

    t2 = df.get(Config.ATT_COL_TIMESTAMP_ALT)  # prioritize TimeStamp
    t1 = df.get(Config.ATT_COL_TIMESTAMP)
    if t2 is None and t1 is None:
        df["TS_raw"] = ""
    else:
        s2 = _clean_str_series(t2) if t2 is not None else pd.Series([""]*len(df))
        s1 = _clean_str_series(t1) if t1 is not None else pd.Series([""]*len(df))
        df["TS_raw"] = s2.where(s2 != "", s1)

    df["TS_dt"] = parse_ts_series(df["TS_raw"])
    return df


def compute_task_status_for_athletes(df_athletes, df_attendance, fixed_task: str) -> pd.DataFrame:
    """Compute current status (Pending/Done) by athlete & event for the fixed task."""
    if df_athletes is None or df_athletes.empty:
        return pd.DataFrame(columns=[Config.COL_NAME, Config.COL_EVENT, 'current_task_status', 'latest_task_user', 'latest_task_timestamp'])

    base = df_athletes.copy()
    base['name_norm'] = base[Config.COL_NAME].apply(clean_and_normalize)
    base['event_norm'] = base[Config.COL_EVENT].apply(clean_and_normalize)

    if df_attendance is None or df_attendance.empty:
        base['current_task_status'] = Config.STATUS_PENDING
        base['latest_task_user'] = 'N/A'
        base['latest_task_timestamp'] = 'N/A'
        return base[[Config.COL_NAME, Config.COL_EVENT, 'current_task_status', 'latest_task_user', 'latest_task_timestamp']]

    task_mask = make_task_mask(df_attendance["task_norm"], fixed_task, Config.TASK_ALIASES)
    df_task = df_attendance[task_mask].copy()

    if df_task.empty:
        base['current_task_status'] = Config.STATUS_PENDING
        base['latest_task_user'] = 'N/A'
        base['latest_task_timestamp'] = 'N/A'
        return base[[Config.COL_NAME, Config.COL_EVENT, 'current_task_status', 'latest_task_user', 'latest_task_timestamp']]

    df_task["__idx__"] = np.arange(len(df_task))
    merged = pd.merge(
        base[[Config.COL_NAME, Config.COL_EVENT, 'name_norm', 'event_norm']],
        df_task,
        left_on=['name_norm', 'event_norm'],
        right_on=['fighter_norm', 'event_norm'],
        how='left'
    )
    merged = merged.sort_values(by=['name_norm', 'event_norm', 'TS_dt', '__idx__'], ascending=[True, True, False, False])
    latest = merged.drop_duplicates(subset=['name_norm', 'event_norm'], keep='first')

    # Done if last status is "Done", otherwise Pending
    last_status = latest[Config.ATT_COL_STATUS].astype(str).str.strip().str.lower()
    latest['current_task_status'] = np.where(last_status.eq("done"), Config.STATUS_DONE, Config.STATUS_PENDING)

    latest['latest_task_timestamp'] = latest.apply(
        lambda r: r['TS_dt'].strftime("%d/%m/%Y") if pd.notna(r.get('TS_dt', pd.NaT))
        else _fmt_date_from_text(r.get('TS_raw', r.get(Config.ATT_COL_TIMESTAMP_ALT, r.get(Config.ATT_COL_TIMESTAMP, '')))),
        axis=1
    )
    latest['latest_task_user'] = latest[Config.ATT_COL_USER].fillna('N/A')

    return latest[[Config.COL_NAME, Config.COL_EVENT, 'current_task_status', 'latest_task_user', 'latest_task_timestamp']]


def registrar_log(
    athlete_id: str,
    ath_name: str,
    ath_event: str,
    status: str,
    user_log_id: str,
    notes: str
) -> bool:
    """Append a row to Attendance with both Timestamp & TimeStamp and notes = links."""
    try:
        gc = get_gspread_client()
        ws = connect_gsheet_tab(gc, Config.MAIN_SHEET_NAME, Config.ATTENDANCE_TAB_NAME)
        all_vals = ws.get_all_values()
        next_num = (int(all_vals[-1][0]) + 1) if (len(all_vals) > 1 and str(all_vals[-1][0]).isdigit()) else (len(all_vals) + 1)
        ts = datetime.now().strftime("%d/%m/%Y %H:%M:%S")
        user_ident = st.session_state.get('current_user_name', user_log_id)

        new_row = [
            str(next_num),
            ath_event,
            str(athlete_id),
            ath_name,
            ath_name,
            Config.FIXED_TASK,
            status,
            user_ident,
            ts,  # Timestamp
            ts,  # TimeStamp
            notes
        ]
        ws.append_row(new_row, value_input_option="USER_ENTERED")
        load_attendance.clear()
        return True
    except Exception as e:
        st.error(f"Error writing Attendance: {e}", icon="🚨")
        return False


# ==============================================================================
# PAGE UI & LOGIC
# ==============================================================================
check_authentication()
st.title("Walkout Music")
display_user_sidebar()

# Defaults
default_ss = {
    "selected_status": "All",
    "selected_event": "All Events",
    "fighter_search_query": "",
    "sort_by": "Name",
}
for k, v in default_ss.items():
    if k not in st.session_state:
        st.session_state[k] = v

# Load data
with st.spinner("Loading data..."):
    df_athletes = load_athletes()
    df_att_raw = load_attendance()
    _tasks_raw, _ = load_config_data()

df_att = preprocess_attendance(df_att_raw)

# Compute status
if not df_athletes.empty:
    st_status = compute_task_status_for_athletes(df_athletes, df_att, Config.FIXED_TASK)
    df_athletes = pd.merge(df_athletes, st_status, on=[Config.COL_NAME, Config.COL_EVENT], how='left')
    df_athletes.fillna({
        'current_task_status': Config.STATUS_PENDING,
        'latest_task_user': 'N/A',
        'latest_task_timestamp': 'N/A'
    }, inplace=True)

# Filters
with st.expander("Settings", expanded=True):
    col_status, col_sort = st.columns(2)
    with col_status:
        STATUS_FILTER_LABELS = {"All": "All", Config.STATUS_DONE: "Done", Config.STATUS_PENDING: "Pending"}
        st.segmented_control(
            "Filter by Status:",
            options=["All", Config.STATUS_DONE, Config.STATUS_PENDING],
            format_func=lambda x: STATUS_FILTER_LABELS.get(x, x),
            key="selected_status"
        )
    with col_sort:
        st.segmented_control("Sort by:", options=["Name", "Fight Order"], key="sort_by")

    event_options = ["All Events"] + (
        sorted([evt for evt in df_athletes[Config.COL_EVENT].unique() if evt != Config.DEFAULT_EVENT_PLACEHOLDER])
        if not df_athletes.empty else []
    )
    st.selectbox("Filter by Event:", options=event_options, key="selected_event")
    st.text_input("Search Athlete:", placeholder="Type athlete name or ID...", key="fighter_search_query")

# Apply filters
df_filtered = df_athletes.copy()
if not df_filtered.empty:
    if st.session_state.selected_event != "All Events":
        df_filtered = df_filtered[df_filtered[Config.COL_EVENT] == st.session_state.selected_event]

    term = st.session_state.fighter_search_query.strip().lower()
    if term:
        df_filtered = df_filtered[
            df_filtered[Config.COL_NAME].str.lower().str.contains(term, na=False) |
            df_filtered[Config.COL_ID].astype(str).str.contains(term, na=False)
        ]

    if st.session_state.selected_status != "All":
        df_filtered = df_filtered[df_filtered['current_task_status'] == st.session_state.selected_status]

    if st.session_state.get('sort_by', 'Name') == 'Fight Order':
        df_filtered['FIGHT_NUMBER_NUM'] = pd.to_numeric(df_filtered[Config.COL_FIGHT_NUMBER], errors='coerce').fillna(999)
        df_filtered['CORNER_SORT'] = df_filtered[Config.COL_CORNER].str.lower().map({'blue': 0, 'red': 1}).fillna(2)
        df_filtered = df_filtered.sort_values(by=['FIGHT_NUMBER_NUM', 'CORNER_SORT'], ascending=[True, True])
    else:
        df_filtered = df_filtered.sort_values(by=Config.COL_NAME, ascending=True)

# Summary
if not df_filtered.empty:
    done_count = (df_filtered['current_task_status'] == Config.STATUS_DONE).sum()
    pending_count = (df_filtered['current_task_status'] == Config.STATUS_PENDING).sum()
    summary_html = f'''<div style="display:flex;flex-wrap:wrap;gap:15px;align-items:center;margin:10px 0;">
        <span style="font-weight:bold;">Showing {len(df_filtered)} of {len(df_athletes)} athletes:</span>
        <span style="background-color:{Config.STATUS_COLOR_MAP[Config.STATUS_DONE]};color:white;padding:4px 12px;border-radius:15px;font-size:0.9em;font-weight:bold;">Done: {done_count}</span>
        <span style="background-color:{Config.STATUS_COLOR_MAP[Config.STATUS_PENDING]};color:white;padding:4px 12px;border-radius:15px;font-size:0.9em;font-weight:bold;">Pending: {pending_count}</span>
    </div>'''
    st.markdown(summary_html, unsafe_allow_html=True)

st.divider()

# CSS (labels red when empty while editing)
st.markdown("""
<style>
    .card-container {
        padding: 15px; border-radius: 10px; margin-bottom: 10px;
        display: flex; align-items: flex-start; gap: 15px;
    }
    .card-img { width: 60px; height: 60px; border-radius: 50%; object-fit: cover; flex-shrink: 0; }
    .card-info { width: 100%; display: flex; flex-direction: column; gap: 8px; }
    .info-line { display: flex; flex-wrap: wrap; align-items: center; gap: 10px; }
    .fighter-name { font-size: 1.25rem; font-weight: bold; margin: 0; color: white; }
    div.stButton > button { width: 100%; }
    .danger-label { color: #ff5c5c !important; font-weight: 600; }
    .danger-input input { border: 1px solid #ff5c5c !important; }
</style>
""", unsafe_allow_html=True)

# Render cards
for i_l, row in df_filtered.iterrows():
    ath_id = str(row.get(Config.COL_ID, ""))
    ath_name = str(row.get(Config.COL_NAME, ""))
    ath_event = str(row.get(Config.COL_EVENT, ""))

    curr_status = row.get('current_task_status', Config.STATUS_PENDING)
    card_bg_col = Config.STATUS_COLOR_MAP.get(curr_status, Config.STATUS_COLOR_MAP[Config.STATUS_PENDING])

    # Top card
    corner_color_map = {'red': '#d9534f', 'blue': '#428bca'}
    label_color = corner_color_map.get(str(row.get(Config.COL_CORNER, "")).lower(), '#4A4A4A')
    info_parts = []
    if ath_event != Config.DEFAULT_EVENT_PLACEHOLDER:
        info_parts.append(html.escape(ath_event))
    if row.get(Config.COL_FIGHT_NUMBER, ""):
        info_parts.append(f"FIGHT {html.escape(str(row.get(Config.COL_FIGHT_NUMBER, '')))}")
    if row.get(Config.COL_CORNER, ""):
        info_parts.append(html.escape(str(row.get(Config.COL_CORNER, "")).upper()))
    fight_info_text = " | ".join(info_parts)
    fight_info_label_html = (
        f"<span style='background-color:{label_color};color:white;padding:3px 10px;border-radius:8px;font-size:0.8em;font-weight:bold;'>{fight_info_text}</span>"
        if fight_info_text else ""
    )

    whatsapp_tag_html = ""
    mob = str(row.get(Config.COL_MOBILE, "")).strip()
    if mob:
        digits = "".join(filter(str.isdigit, mob))
        if digits.startswith('00'):
            digits = digits[2:]
        if digits:
            whatsapp_tag_html = (
                f"<a href='https://wa.me/{html.escape(digits, True)}' target='_blank' style='text-decoration:none;'>"
                f"<span style='background-color:#25D366;color:white;padding:3px 10px;border-radius:8px;font-size:0.8em;font-weight:bold;'>WhatsApp</span>"
                f"</a>"
            )
    passport_url = str(row.get(Config.COL_PASSPORT_IMAGE, ""))
    passport_tag_html = (
        f"<a href='{html.escape(passport_url, True)}' target='_blank' style='text-decoration:none;'>"
        f"<span style='background-color:#007BFF;color:white;padding:3px 10px;border-radius:8px;font-size:0.8em;font-weight:bold;'>Passport</span>"
        f"</a>"
        if passport_url and passport_url.startswith("http") else ""
    )

    stat_text = "Done" if curr_status == Config.STATUS_DONE else "Pending"
    latest_user = row.get("latest_task_user", "N/A") or "N/A"
    latest_dt = row.get("latest_task_timestamp", "N/A") or "N/A"
    task_status_html = f"<small style='color:#ccc;'>{html.escape(Config.FIXED_TASK)}: <b>{html.escape(stat_text)}</b> <i>({html.escape(latest_dt)} • {html.escape(latest_user)})</i></small>"

    card_html = f"""<div class='card-container' style='background-color:{card_bg_col};'>
        <img src='{html.escape(row.get(Config.COL_IMAGE, "https://via.placeholder.com/60?text=NA"), True)}' class='card-img'>
        <div class='card-info'>
            <div class='info-line'><span class='fighter-name'>{html.escape(ath_name)} | {html.escape(ath_id)}</span></div>
            <div class='info-line'>{fight_info_label_html}</div>
            <div class='info-line'>{whatsapp_tag_html}{passport_tag_html}</div>
            <div class='info-line'>{task_status_html}</div>
        </div>
    </div>"""

    st.markdown(card_html, unsafe_allow_html=True)

    # --- Below card: link fields (like Stats) ---
    # per-athlete edit mode & fields
    edit_key = f"edit_mode_{ath_id}"
    if edit_key not in st.session_state:
        st.session_state[edit_key] = False
    is_editing = st.session_state[edit_key]

    # store field values in session (persist while editing)
    for fld in ("l1", "l2", "l3"):
        k = f"wlm_{fld}_{ath_id}"
        if k not in st.session_state:
            st.session_state[k] = ""

    # grid layout
    c1, c2, c3 = st.columns([1, 1, 1])
    with c1:
        lbl = "Music Link 1"
        cls = "danger-label" if is_editing and not st.session_state[f"wlm_l1_{ath_id}"].strip() else ""
        st.markdown(f"<label class='{cls}'>{lbl}</label>", unsafe_allow_html=True)
        st.text_input(
            "", key=f"wlm_l1_{ath_id}",
            placeholder="Paste URL (YouTube, Spotify, etc.)",
            disabled=not is_editing
        )
    with c2:
        st.markdown("<label>Music Link 2</label>", unsafe_allow_html=True)
        st.text_input("", key=f"wlm_l2_{ath_id}", placeholder="Paste URL (optional)", disabled=not is_editing)
    with c3:
        st.markdown("<label>Music Link 3</label>", unsafe_allow_html=True)
        st.text_input("", key=f"wlm_l3_{ath_id}", placeholder="Paste URL (optional)", disabled=not is_editing)

    # Buttons row (Edit / Save)
    bb1, bb2 = st.columns([0.5, 0.5])
    with bb1:
        if not is_editing:
            if st.button("Edit", key=f"edit_{ath_id}", use_container_width=True):
                st.session_state[edit_key] = True
                # optional: prefill link 1 from last note (not implemented here)
                st.rerun()
        else:
            if st.button("Cancel Edit", key=f"cancel_{ath_id}", use_container_width=True):
                st.session_state[edit_key] = False
                st.rerun()

    with bb2:
        if st.button("Save", key=f"save_{ath_id}", type="primary", use_container_width=True, disabled=not is_editing):
            link1 = st.session_state.get(f"wlm_l1_{ath_id}", "").strip()
            link2 = st.session_state.get(f"wlm_l2_{ath_id}", "").strip()
            link3 = st.session_state.get(f"wlm_l3_{ath_id}", "").strip()
            if not link1:
                st.warning("Music Link 1 is required.", icon="⚠️")
            else:
                notes_val = join_links(link1, link2, link3)
                uid_l = st.session_state.get("current_user_ps_id_internal", st.session_state.get("current_user_id", ""))
                if registrar_log(ath_id, ath_name, ath_event, Config.STATUS_DONE, uid_l, notes_val):
                    st.session_state[edit_key] = False
                    time.sleep(1); st.rerun()

    st.markdown("<hr style='border-top:1px solid #333;margin-top:10px;margin-bottom:25px;'>", unsafe_allow_html=True)
